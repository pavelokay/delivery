@page "/admin/adminCatalog"

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]

@inject IProductDataProvider _productDataProvider
@inject ICartDataProvider _cartDataProvider
@inject ICategoryDataProvider _categoryDataProvider

<h3>Каталог товаров</h3>
<select class="form-select" @bind="_selectedCategoryId">
    <option selected value="null">Все товары</option>
    @foreach (var category in _categories)
    {
        <option value="@category.Id">@category.Name</option>
    }
</select>

<TableTemplate Items="_products.ToList()" Context="product" PageSize="15" CategoryId="_selectedCategoryId">
    <TableHeader>
        <th>Изображение</th>
        <th>Slug</th>
        <th>Наименование</th>
        <th>Вид товара</th>
        <th>Стоимость</th>
        <th>Действия</th>
    </TableHeader>
    <RowTemplate>
        <td><img src="@product.ProductImages.FirstOrDefault().ImageFile" alt="@product.ProductImages.FirstOrDefault().AltName" /></td>
        <td>@product.Slug</td>
        <td>@product.Name</td>
        @if (product is UnitProductModel)
        {
            var unitProduct = (UnitProductModel)product;
            <td>единица</td>
            <td>@unitProduct.UnitPrice р./шт.</td>
        }
        else
        {
            var weightProduct = (WeightProductModel)product;
            <td>весовой</td>
            <td>@weightProduct.PricePerKilo р./кг.</td>
        }

        <td>
            <NavLink class="nav-link" href="@GetFullProductRoute("productDetail/", product)">
                <span class="oi oi-plus" aria-hidden="true"></span>Детали
            </NavLink>
            <NavLink class="nav-link" href="@GetFullProductRoute("editProduct/", product)">
                <span class="oi oi-plus" aria-hidden="true"></span>Редактировать
            </NavLink>
            <button class="btn btn-outline-dark" oninput="@HandleDeleteProduct(product.Id)">Удалить</button>
        </td>
    </RowTemplate>
</TableTemplate>

@code {
    private IEnumerable<ProductModel> _products;
    private CartModel _cart;
    private IEnumerable<CategoryModel> _categories;

    private int? _selectedCategoryId;

    protected override async Task OnInitializedAsync()
    {
        _products = await _productDataProvider.GetProducts();
        _cart = await _cartDataProvider.GetCart();
        _categories = await _categoryDataProvider.GetCategories();
    }

    private async Task AddProductToCart(ProductModel product)
    {
        if (product != null)
        {
            await _cartDataProvider.AddItem("", product.Id);
        }
    }

    private async Task RemoveProductFromCart(CartItemModel cartItem)
    {
        if (cartItem != null)
        {
            await _cartDataProvider.RemoveItem(_cart.Id, cartItem.Id);
        }
    }

    private string GetFullProductRoute(string route, ProductModel product)
    {
        return route + product.Name;
    }

    private async Task HandleDeleteProduct(int id)
    {
        await _productDataProvider.DeleteProduct(id);
    }

}
