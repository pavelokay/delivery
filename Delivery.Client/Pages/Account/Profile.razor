@page "/account/profile"

@attribute [Authorize]

@using System.Security.Claims
@using Application.Models.Account
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAuthenticationDataProvider _authenticationDataProvider

<h3>Profile</h3>
<AuthorizeView>
    <Authorized>
        <div class="profile">
            <div class="profile-info">
                <h4 class="profile-info__title">Пользователь</h4>
                <ul class="profile-info-list">
                    <li>Логин: @_user.UserName</li>
                    <li>Имя: @_user.FirstName</li>
                    <li>Фамилия: @_user.LastName</li>
                    <li>Адрес: @_user.Address.City, @_user.Address.AddressLine</li>
                    <li>Телефон: @_user.PhoneNumber</li>
                    <li>E-mail: @_user.Email</li>
                    <li>Дата создания: @_user.CreatedAt.Date.ToString("d")</li>
                </ul>
                <NavLink class="nav-link" href="@GetFullRoute("/account/editProfile", _user)"><span>Редактировать</span></NavLink>
                <button class="btn btn-outline-danger" @oninput="HandleDeleteUser">Удалить</button>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <p>You're not logged in.</p>
    </NotAuthorized>
</AuthorizeView>


@code {
    //[CascadingParameter]
    //private Task<AuthenticationState> authenticationStateTask { get; set; }

    //private string _authMessage;

    //private IEnumerable<Claim> _claims;


    private ApplicationUserModel _user;

    protected async override Task OnInitializedAsync()
    {
        _user = _authenticationDataProvider.
    }

    //private async Task GetClaimsPrincipalData()
    //{
    //    var authState = await authenticationStateTask;
    //    var _authUser = authState.User;

    //    if (_authUser.Identity.IsAuthenticated)
    //    {
    //        _authMessage = $"{_authUser.Identity.Name} is authenticated.";
    //        _claims = _authUser.Claims;
    //    }
    //    else
    //    {
    //        _authMessage = "The user is NOT authenticated.";
    //    }
    //}

    private string GetFullRoute(string route, ApplicationUserModel user)
    {
        return route + user.UserName;
    }

    private async Task HandleDeleteUser()
    {
        await _authenticationDataProvider.DeleteUser(_user.Id);
    }
}
