@page "/order"

@inject ICartDataProvider _cartDataProdiver
@inject IOrderDataProvider _orderDataProvider

<h3>Order</h3>

<p>
    Количество товаров в корзине: @_cart.Items.Count();
    Стоимость: @_cart.Items.Sum(i => i.TotalPrice);
</p>

<EditForm Model="@_order" OnInvalidSubmit="@HandleValidSubmitOrder">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <p>
        <label>
            Город:
            <InputText id="address-city" @bind-Value="_order.Address.City"></InputText>
        </label>
    </p>

    <p>
        <label>
            Адрес:
            <InputText id="address-address" @bind-Value="_order.Address.AddressLine"></InputText>
        </label>
    </p>

    <p>
        <label>
            Название компании:
            <InputText id="address-company" @bind-Value="_order.Address.CompanyName"></InputText>
        </label>
    </p>

    <p>
        <label>
            Телефон:
            <InputText id="address-phone" @bind-Value="_order.Address.PhoneNo"></InputText>
        </label>
    </p>

    <p>
        <label>
            email:
            <InputText id="address-phone" @bind-Value="_order.Address.EmailAddress"></InputText>
        </label>
    </p>

    <p>
        <label>
            Метод оплыты:
            <InputSelect id="paymentMethod" @bind-Value="_order.PaymentMethod" />
        </label>
    </p>
</EditForm>

@code {
    private OrderModel _order = new();
    private CartModel _cart;

    protected async override Task OnInitializedAsync()
    {
     _cart = await _cartDataProdiver.GetCart();
    }

    private async Task HandleValidSubmitOrder()
    {
        _order.OrderTime = DateTime.Now;
        
        await _orderDataProvider.MakeOrder(_order, "");
    }
}
